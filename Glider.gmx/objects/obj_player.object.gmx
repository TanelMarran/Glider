<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_shadow</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

//Movement variables
dir = 90; //The target movement direction
dir_act = 90; //The actual movement direction fo the player

t_axis_x = 0; //The target x velocity
t_axis_y = 0; //The target y velocity

axis_x = 0; //What the x velocity actually is
axis_y = 0; //What the y velocity actually is


min_movement_speed = 2; //The minimum player speed
max_movement_speed = 10; //The maximum player speed
movement_speed = 2; //The player actual current speed

//pyth_movement = 0 //This seems to be useless

stat_acc_amount = min_movement_speed; //Acceleration
acc_amount = 5; //How fast the player can accelerate and deaccelerate
speed_loss = 0.001; //How fast the player loses speed (flat)
speed_loss_percent = 0.002; //How fast the player loses speed (percent of movement speed)
purify_speed_gain = 0.5; //How much speed the player gains when purifying something

speed_loss_pause = 0 //How many frames til speed starts decreasing again
purify_speed_loss_pause = 30; //How long to pause speed loss when the player has purified somebody
circling_start_boost_time = 15 //How many frames the circling boost continues for

player_state = state_player_move; //Defines the player's current behaviour (what actions they can perform etc)

///Hook variables
//Variables that define how the player circles around an achor point.

hook_time = 0; //How long the player has been circling
hook_active = false; //If the player is circling or not
hook_radius = 0; //The expected radius that the player should circle around
hook_radius_act = 0; //The actual radius of the player circling. Is ajusted according to hook_radius so that the player is circling at a constant radius.
hook_x = 0; //The center of the circle's x
hook_y = 0; //The center of the circle's y
hook_stretching = 0; //Saves the speed at which the player started using the slingshot tech. so that after the turn has happened we can reapply the speed.
hook_stretching_time = 0; //Saves how long the player has been using the slingshot tech. Used in executing the quick turn tech.
hook_circling = false; //Wheter or not were circling
hook_circling_dir = 0; //What was the last direction of circling - 1 means clockwize and -1 counter cw

var qts = 10;
var qtl = 6;
hook_stretching_quickturn_frames = array(qts,qts+qtl); //How many n first frames can be used to activate the quickturn tech.

hook_rite = noone //The ID of the current instance of obj_rite_completion - defines what circle the player is creating

stat_dir_change = 0 //The base turning speed that will be multiplied by a factor to increase the turning speed exponentially
dir_change = 5 //How fast the player is turning (?)

invincibility = 0 // if greater than 0, then the player is invincible.

death_source = noone; //Saves the object id of what defeated the player

///These 3 seem uselss?
//hook_rite_start = 0
//hook_rite_current = noone
//hook_rite_last = noone
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Image tween
init_image_tween();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create objects
instance_create(x,y,obj_teleport_charge);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Image tween
endstep_image_tween();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Freezeframe
if (g.freeze != 0) {
    image_index = image_index-image_speed;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define the depth of the player
depth = -y


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test

if(mouse_check_button_pressed(mb_right)) {
        with(instance_create(obj_player.x,obj_player.y,obj_player_projectile)) {
            start_coord = array(other.x,other.y);
            target_coord = array(get_mouse_x(),get_mouse_y());
            interm_coord = array(
                                lerp(start_coord[0],target_coord[0],0.05),
                                lerp(start_coord[1],target_coord[1],0.05)-path_height
                                );
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute state
script_execute(player_state)

if keyboard_check_pressed(ord("R")) {
    game_restart()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw smoke on quickturn
if(value_in_range(hook_stretching_time,array(1,15)) &amp;&amp; player_state = state_player_move) {
    var s = 1/movement_speed*movement_speed*2
    dust = create_particle_dust(x+lengthdir_x(s,dir_act),y+lengthdir_y(s,dir_act),dir_act,s,15,0.05,0.5,15*movement_speed);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the current radius of the player's circling
if (player_state = state_player_move) {
    draw_set_alpha(clamp(0.3*hook_time/5,0,0.3))
    draw_set_color(merge_color(c_black,color_flame,0.7));
    
        for(var i = 0; i &lt; 361; i = i+6) {
            var s = sign(angle_difference(point_direction(0,0,axis_x,axis_y),point_direction(x,y,hook_x,hook_y)))
            var xx1 = dcos(obj_controller.gametime*s*0.5+max(0,i-4))*hook_radius
            var yy1 = -dsin(obj_controller.gametime*s*0.5+max(0,i-4))*hook_radius
            var xx2 = dcos(obj_controller.gametime*s*0.5+max(0,i))*hook_radius
            var yy2 = -dsin(obj_controller.gametime*s*0.5+max(0,i))*hook_radius
            draw_line_width(hook_x+xx1,hook_y+yy1,hook_x+xx2,hook_y+yy2,2)
        }
    draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self
player_animations()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*//Draw Variables

var arr;

arr[0] = image_index;
arr[1] = dir_act;
arr[2] = dir;
arr[3] = hook_stretching;
arr[4] = dir_change;

for(var i = 0; i &lt; array_length_1d(arr); i++) {
    draw_text(view_xview[0]+32,view_yview[0]+32+32*i,string(arr[i]));
}

for(i = 0; i &lt;= 1; i += 0.01)  {
    v = 10;
    var point =  bezier_point(x,y,(get_mouse_x()+x)*0.5,(get_mouse_y()+y)*0.5-200,get_mouse_x(),get_mouse_y(),i);
    var pointl = bezier_point(x,y,(get_mouse_x()+x)*0.5,(get_mouse_y()+y)*0.5-200,get_mouse_x(),get_mouse_y(),max(0,i-0.01));
    draw_line(point[0],point[1],pointl[0],pointl[1]);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
