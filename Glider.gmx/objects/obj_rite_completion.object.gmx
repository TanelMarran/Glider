<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

hook_radius = 0 //The radius of the circle
hook_rite_start = 0 //The angle from where the circle began. Used in drawing the circle.

hook_rite_last = 0 //The angle the player was in last frame. Used in calculating the delta (change) in circle completion.
hook_rite = 0 //The current completion of the circle. 360 means that a full circle has been created and that a damage object should be created.
hook_rite_current = 0 //The angle the player is in the current frame. Used in calculating the delta (change) in circle completion.
start = 0

//Variables used as a 'buffer'. If the player releases the circling button a few frames to early, then this assures that
//the circle still completes. Mostly in place so that it feels more intuitive and fair to the player.
death_max = 5
death_time = death_max
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Freezeframe
if (g.freeze != 0) {
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Detect the circle completion and create the damage object upon circle completion
hook_rite_current = point_direction(x,y,obj_player.x,obj_player.y)

//Get the last angle the player was in, the current angle the player is in
//and use that to calculate the amount the circle has been filled in this step.
if start = 1 {
    hook_rite = hook_rite+abs(angle_difference(hook_rite_current,hook_rite_last))
}
start = 1

if hook_rite &gt;= 360 {
    with(instance_create(x,y,obj_rite_damage)) { //Create the damage object that kills monsters inside the ring.
        size = other.hook_radius
    }
    hook_rite = abs(angle_difference(point_direction(x,y,obj_player.x,obj_player.y),hook_rite_start)) //Refresh the hook_rite completion variable to reflect the start of a new circle.
    if death_time &lt; death_max {
        instance_destroy() //If the circle is completed during the buffer period, then destroy this object once the circle is completed
        //The circle will be reused for another circle otherwise
    }
}

if death_time &lt; death_max { //If the circle's death counter has started, then continue until the circle is destroyed
    death_time--
}

if mouse_check_button_released(mb_left) {
    obj_player.hook_rite = noone
    death_time-- //The player has stopped circling. Starts the death countdown. Destroy the circle in a few frames time.
}

if death_time = 0 { //Once the countdown has reached its end, destroy this circle.
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Freezeframe
if (g.freeze != 0) {
    image_index = image_index-image_speed;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save the value of the last angle the player was in in relation to the circle
hook_rite_last = point_direction(x,y,obj_player.x,obj_player.y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the circle
depth = obj_player+10000
draw_set_alpha(0.5*death_time/death_max)

draw_set_color(make_color_rgb(77, 66, 51))

for(var i = 0; i &lt; ceil(hook_rite); i++) {
    var s = -sign(angle_difference(point_direction(0,0,obj_player.axis_x,obj_player.axis_y),point_direction(obj_player.x,obj_player.y,x,y)))
    var xx1 = dcos(hook_rite_start+s*max(0,i-1))*hook_radius
    var yy1 = -dsin(hook_rite_start+s*max(0,i-1))*hook_radius
    var xx2 = dcos(hook_rite_start+s*max(0,i))*hook_radius
    var yy2 = -dsin(hook_rite_start+s*max(0,i))*hook_radius
    draw_line_width(x+xx1,y+yy1,x+xx2,y+yy2,2)
}

draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
